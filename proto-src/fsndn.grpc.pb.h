// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fsndn.proto
#ifndef GRPC_fsndn_2eproto__INCLUDED
#define GRPC_fsndn_2eproto__INCLUDED

#include "fsndn.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace fsndnproto {

// The DataNode service definition.
class DataNodeSer final {
 public:
  static constexpr char const* service_full_name() {
    return "fsndnproto.DataNodeSer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    // rpc SayHello (HelloRequest) returns (HelloReply) {};
    virtual ::grpc::Status AddEmptyFile(::grpc::ClientContext* context, const ::fsndnproto::AddEmptyFileRequest& request, ::fsndnproto::IntReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>> AsyncAddEmptyFile(::grpc::ClientContext* context, const ::fsndnproto::AddEmptyFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>>(AsyncAddEmptyFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>> PrepareAsyncAddEmptyFile(::grpc::ClientContext* context, const ::fsndnproto::AddEmptyFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>>(PrepareAsyncAddEmptyFileRaw(context, request, cq));
    }
    virtual ::grpc::Status AddNewFile(::grpc::ClientContext* context, const ::fsndnproto::AddNewFileRequest& request, ::fsndnproto::IntReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>> AsyncAddNewFile(::grpc::ClientContext* context, const ::fsndnproto::AddNewFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>>(AsyncAddNewFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>> PrepareAsyncAddNewFile(::grpc::ClientContext* context, const ::fsndnproto::AddNewFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>>(PrepareAsyncAddNewFileRaw(context, request, cq));
    }
    virtual ::grpc::Status DelFile(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::fsndnproto::IntReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>> AsyncDelFile(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>>(AsyncDelFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>> PrepareAsyncDelFile(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>>(PrepareAsyncDelFileRaw(context, request, cq));
    }
    virtual ::grpc::Status DelDir(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::fsndnproto::IntReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>> AsyncDelDir(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>>(AsyncDelDirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>> PrepareAsyncDelDir(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>>(PrepareAsyncDelDirRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFileSize(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::fsndnproto::LongReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::LongReply>> AsyncGetFileSize(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::LongReply>>(AsyncGetFileSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::LongReply>> PrepareAsyncGetFileSize(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::LongReply>>(PrepareAsyncGetFileSizeRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteToFile(::grpc::ClientContext* context, const ::fsndnproto::WriteRequest& request, ::fsndnproto::IntReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>> AsyncWriteToFile(::grpc::ClientContext* context, const ::fsndnproto::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>>(AsyncWriteToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>> PrepareAsyncWriteToFile(::grpc::ClientContext* context, const ::fsndnproto::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>>(PrepareAsyncWriteToFileRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadFromFile(::grpc::ClientContext* context, const ::fsndnproto::ReadRequest& request, ::fsndnproto::ReadReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ReadReply>> AsyncReadFromFile(::grpc::ClientContext* context, const ::fsndnproto::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ReadReply>>(AsyncReadFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ReadReply>> PrepareAsyncReadFromFile(::grpc::ClientContext* context, const ::fsndnproto::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ReadReply>>(PrepareAsyncReadFromFileRaw(context, request, cq));
    }
    virtual ::grpc::Status AddFileSeg(::grpc::ClientContext* context, const ::fsndnproto::AddFileSegRequest& request, ::fsndnproto::IntReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>> AsyncAddFileSeg(::grpc::ClientContext* context, const ::fsndnproto::AddFileSegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>>(AsyncAddFileSegRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>> PrepareAsyncAddFileSeg(::grpc::ClientContext* context, const ::fsndnproto::AddFileSegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>>(PrepareAsyncAddFileSegRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFileSeg(::grpc::ClientContext* context, const ::fsndnproto::GetFileSegRequest& request, ::fsndnproto::ReadReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ReadReply>> AsyncGetFileSeg(::grpc::ClientContext* context, const ::fsndnproto::GetFileSegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ReadReply>>(AsyncGetFileSegRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ReadReply>> PrepareAsyncGetFileSeg(::grpc::ClientContext* context, const ::fsndnproto::GetFileSegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ReadReply>>(PrepareAsyncGetFileSegRaw(context, request, cq));
    }
    virtual ::grpc::Status GetChildren(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::fsndnproto::ChildrenReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ChildrenReply>> AsyncGetChildren(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ChildrenReply>>(AsyncGetChildrenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ChildrenReply>> PrepareAsyncGetChildren(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ChildrenReply>>(PrepareAsyncGetChildrenRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllChildren(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::fsndnproto::ChildrenReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ChildrenReply>> AsyncGetAllChildren(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ChildrenReply>>(AsyncGetAllChildrenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ChildrenReply>> PrepareAsyncGetAllChildren(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ChildrenReply>>(PrepareAsyncGetAllChildrenRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSpaceSize(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::fsndnproto::LongReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::LongReply>> AsyncGetSpaceSize(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::LongReply>>(AsyncGetSpaceSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::LongReply>> PrepareAsyncGetSpaceSize(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::LongReply>>(PrepareAsyncGetSpaceSizeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends a greeting
      // rpc SayHello (HelloRequest) returns (HelloReply) {};
      virtual void AddEmptyFile(::grpc::ClientContext* context, const ::fsndnproto::AddEmptyFileRequest* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddEmptyFile(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddNewFile(::grpc::ClientContext* context, const ::fsndnproto::AddNewFileRequest* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddNewFile(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DelFile(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DelFile(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DelDir(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DelDir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFileSize(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::LongReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFileSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::LongReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteToFile(::grpc::ClientContext* context, const ::fsndnproto::WriteRequest* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteToFile(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadFromFile(::grpc::ClientContext* context, const ::fsndnproto::ReadRequest* request, ::fsndnproto::ReadReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadFromFile(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::ReadReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddFileSeg(::grpc::ClientContext* context, const ::fsndnproto::AddFileSegRequest* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddFileSeg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFileSeg(::grpc::ClientContext* context, const ::fsndnproto::GetFileSegRequest* request, ::fsndnproto::ReadReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFileSeg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::ReadReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChildren(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::ChildrenReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChildren(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::ChildrenReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllChildren(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::ChildrenReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllChildren(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::ChildrenReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpaceSize(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::LongReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSpaceSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::LongReply* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>* AsyncAddEmptyFileRaw(::grpc::ClientContext* context, const ::fsndnproto::AddEmptyFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>* PrepareAsyncAddEmptyFileRaw(::grpc::ClientContext* context, const ::fsndnproto::AddEmptyFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>* AsyncAddNewFileRaw(::grpc::ClientContext* context, const ::fsndnproto::AddNewFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>* PrepareAsyncAddNewFileRaw(::grpc::ClientContext* context, const ::fsndnproto::AddNewFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>* AsyncDelFileRaw(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>* PrepareAsyncDelFileRaw(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>* AsyncDelDirRaw(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>* PrepareAsyncDelDirRaw(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::LongReply>* AsyncGetFileSizeRaw(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::LongReply>* PrepareAsyncGetFileSizeRaw(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>* AsyncWriteToFileRaw(::grpc::ClientContext* context, const ::fsndnproto::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>* PrepareAsyncWriteToFileRaw(::grpc::ClientContext* context, const ::fsndnproto::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ReadReply>* AsyncReadFromFileRaw(::grpc::ClientContext* context, const ::fsndnproto::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ReadReply>* PrepareAsyncReadFromFileRaw(::grpc::ClientContext* context, const ::fsndnproto::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>* AsyncAddFileSegRaw(::grpc::ClientContext* context, const ::fsndnproto::AddFileSegRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::IntReply>* PrepareAsyncAddFileSegRaw(::grpc::ClientContext* context, const ::fsndnproto::AddFileSegRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ReadReply>* AsyncGetFileSegRaw(::grpc::ClientContext* context, const ::fsndnproto::GetFileSegRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ReadReply>* PrepareAsyncGetFileSegRaw(::grpc::ClientContext* context, const ::fsndnproto::GetFileSegRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ChildrenReply>* AsyncGetChildrenRaw(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ChildrenReply>* PrepareAsyncGetChildrenRaw(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ChildrenReply>* AsyncGetAllChildrenRaw(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::ChildrenReply>* PrepareAsyncGetAllChildrenRaw(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::LongReply>* AsyncGetSpaceSizeRaw(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::fsndnproto::LongReply>* PrepareAsyncGetSpaceSizeRaw(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AddEmptyFile(::grpc::ClientContext* context, const ::fsndnproto::AddEmptyFileRequest& request, ::fsndnproto::IntReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>> AsyncAddEmptyFile(::grpc::ClientContext* context, const ::fsndnproto::AddEmptyFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>>(AsyncAddEmptyFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>> PrepareAsyncAddEmptyFile(::grpc::ClientContext* context, const ::fsndnproto::AddEmptyFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>>(PrepareAsyncAddEmptyFileRaw(context, request, cq));
    }
    ::grpc::Status AddNewFile(::grpc::ClientContext* context, const ::fsndnproto::AddNewFileRequest& request, ::fsndnproto::IntReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>> AsyncAddNewFile(::grpc::ClientContext* context, const ::fsndnproto::AddNewFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>>(AsyncAddNewFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>> PrepareAsyncAddNewFile(::grpc::ClientContext* context, const ::fsndnproto::AddNewFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>>(PrepareAsyncAddNewFileRaw(context, request, cq));
    }
    ::grpc::Status DelFile(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::fsndnproto::IntReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>> AsyncDelFile(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>>(AsyncDelFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>> PrepareAsyncDelFile(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>>(PrepareAsyncDelFileRaw(context, request, cq));
    }
    ::grpc::Status DelDir(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::fsndnproto::IntReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>> AsyncDelDir(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>>(AsyncDelDirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>> PrepareAsyncDelDir(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>>(PrepareAsyncDelDirRaw(context, request, cq));
    }
    ::grpc::Status GetFileSize(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::fsndnproto::LongReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::LongReply>> AsyncGetFileSize(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::LongReply>>(AsyncGetFileSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::LongReply>> PrepareAsyncGetFileSize(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::LongReply>>(PrepareAsyncGetFileSizeRaw(context, request, cq));
    }
    ::grpc::Status WriteToFile(::grpc::ClientContext* context, const ::fsndnproto::WriteRequest& request, ::fsndnproto::IntReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>> AsyncWriteToFile(::grpc::ClientContext* context, const ::fsndnproto::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>>(AsyncWriteToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>> PrepareAsyncWriteToFile(::grpc::ClientContext* context, const ::fsndnproto::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>>(PrepareAsyncWriteToFileRaw(context, request, cq));
    }
    ::grpc::Status ReadFromFile(::grpc::ClientContext* context, const ::fsndnproto::ReadRequest& request, ::fsndnproto::ReadReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ReadReply>> AsyncReadFromFile(::grpc::ClientContext* context, const ::fsndnproto::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ReadReply>>(AsyncReadFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ReadReply>> PrepareAsyncReadFromFile(::grpc::ClientContext* context, const ::fsndnproto::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ReadReply>>(PrepareAsyncReadFromFileRaw(context, request, cq));
    }
    ::grpc::Status AddFileSeg(::grpc::ClientContext* context, const ::fsndnproto::AddFileSegRequest& request, ::fsndnproto::IntReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>> AsyncAddFileSeg(::grpc::ClientContext* context, const ::fsndnproto::AddFileSegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>>(AsyncAddFileSegRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>> PrepareAsyncAddFileSeg(::grpc::ClientContext* context, const ::fsndnproto::AddFileSegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>>(PrepareAsyncAddFileSegRaw(context, request, cq));
    }
    ::grpc::Status GetFileSeg(::grpc::ClientContext* context, const ::fsndnproto::GetFileSegRequest& request, ::fsndnproto::ReadReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ReadReply>> AsyncGetFileSeg(::grpc::ClientContext* context, const ::fsndnproto::GetFileSegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ReadReply>>(AsyncGetFileSegRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ReadReply>> PrepareAsyncGetFileSeg(::grpc::ClientContext* context, const ::fsndnproto::GetFileSegRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ReadReply>>(PrepareAsyncGetFileSegRaw(context, request, cq));
    }
    ::grpc::Status GetChildren(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::fsndnproto::ChildrenReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ChildrenReply>> AsyncGetChildren(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ChildrenReply>>(AsyncGetChildrenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ChildrenReply>> PrepareAsyncGetChildren(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ChildrenReply>>(PrepareAsyncGetChildrenRaw(context, request, cq));
    }
    ::grpc::Status GetAllChildren(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::fsndnproto::ChildrenReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ChildrenReply>> AsyncGetAllChildren(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ChildrenReply>>(AsyncGetAllChildrenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ChildrenReply>> PrepareAsyncGetAllChildren(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::ChildrenReply>>(PrepareAsyncGetAllChildrenRaw(context, request, cq));
    }
    ::grpc::Status GetSpaceSize(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::fsndnproto::LongReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::LongReply>> AsyncGetSpaceSize(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::LongReply>>(AsyncGetSpaceSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::LongReply>> PrepareAsyncGetSpaceSize(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::fsndnproto::LongReply>>(PrepareAsyncGetSpaceSizeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AddEmptyFile(::grpc::ClientContext* context, const ::fsndnproto::AddEmptyFileRequest* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) override;
      void AddEmptyFile(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) override;
      void AddNewFile(::grpc::ClientContext* context, const ::fsndnproto::AddNewFileRequest* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) override;
      void AddNewFile(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) override;
      void DelFile(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) override;
      void DelFile(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) override;
      void DelDir(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) override;
      void DelDir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) override;
      void GetFileSize(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::LongReply* response, std::function<void(::grpc::Status)>) override;
      void GetFileSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::LongReply* response, std::function<void(::grpc::Status)>) override;
      void WriteToFile(::grpc::ClientContext* context, const ::fsndnproto::WriteRequest* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) override;
      void WriteToFile(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) override;
      void ReadFromFile(::grpc::ClientContext* context, const ::fsndnproto::ReadRequest* request, ::fsndnproto::ReadReply* response, std::function<void(::grpc::Status)>) override;
      void ReadFromFile(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::ReadReply* response, std::function<void(::grpc::Status)>) override;
      void AddFileSeg(::grpc::ClientContext* context, const ::fsndnproto::AddFileSegRequest* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) override;
      void AddFileSeg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::IntReply* response, std::function<void(::grpc::Status)>) override;
      void GetFileSeg(::grpc::ClientContext* context, const ::fsndnproto::GetFileSegRequest* request, ::fsndnproto::ReadReply* response, std::function<void(::grpc::Status)>) override;
      void GetFileSeg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::ReadReply* response, std::function<void(::grpc::Status)>) override;
      void GetChildren(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::ChildrenReply* response, std::function<void(::grpc::Status)>) override;
      void GetChildren(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::ChildrenReply* response, std::function<void(::grpc::Status)>) override;
      void GetAllChildren(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::ChildrenReply* response, std::function<void(::grpc::Status)>) override;
      void GetAllChildren(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::ChildrenReply* response, std::function<void(::grpc::Status)>) override;
      void GetSpaceSize(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::LongReply* response, std::function<void(::grpc::Status)>) override;
      void GetSpaceSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::fsndnproto::LongReply* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>* AsyncAddEmptyFileRaw(::grpc::ClientContext* context, const ::fsndnproto::AddEmptyFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>* PrepareAsyncAddEmptyFileRaw(::grpc::ClientContext* context, const ::fsndnproto::AddEmptyFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>* AsyncAddNewFileRaw(::grpc::ClientContext* context, const ::fsndnproto::AddNewFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>* PrepareAsyncAddNewFileRaw(::grpc::ClientContext* context, const ::fsndnproto::AddNewFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>* AsyncDelFileRaw(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>* PrepareAsyncDelFileRaw(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>* AsyncDelDirRaw(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>* PrepareAsyncDelDirRaw(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::LongReply>* AsyncGetFileSizeRaw(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::LongReply>* PrepareAsyncGetFileSizeRaw(::grpc::ClientContext* context, const ::fsndnproto::FileNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>* AsyncWriteToFileRaw(::grpc::ClientContext* context, const ::fsndnproto::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>* PrepareAsyncWriteToFileRaw(::grpc::ClientContext* context, const ::fsndnproto::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::ReadReply>* AsyncReadFromFileRaw(::grpc::ClientContext* context, const ::fsndnproto::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::ReadReply>* PrepareAsyncReadFromFileRaw(::grpc::ClientContext* context, const ::fsndnproto::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>* AsyncAddFileSegRaw(::grpc::ClientContext* context, const ::fsndnproto::AddFileSegRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::IntReply>* PrepareAsyncAddFileSegRaw(::grpc::ClientContext* context, const ::fsndnproto::AddFileSegRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::ReadReply>* AsyncGetFileSegRaw(::grpc::ClientContext* context, const ::fsndnproto::GetFileSegRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::ReadReply>* PrepareAsyncGetFileSegRaw(::grpc::ClientContext* context, const ::fsndnproto::GetFileSegRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::ChildrenReply>* AsyncGetChildrenRaw(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::ChildrenReply>* PrepareAsyncGetChildrenRaw(::grpc::ClientContext* context, const ::fsndnproto::PrefixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::ChildrenReply>* AsyncGetAllChildrenRaw(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::ChildrenReply>* PrepareAsyncGetAllChildrenRaw(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::LongReply>* AsyncGetSpaceSizeRaw(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::fsndnproto::LongReply>* PrepareAsyncGetSpaceSizeRaw(::grpc::ClientContext* context, const ::fsndnproto::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddEmptyFile_;
    const ::grpc::internal::RpcMethod rpcmethod_AddNewFile_;
    const ::grpc::internal::RpcMethod rpcmethod_DelFile_;
    const ::grpc::internal::RpcMethod rpcmethod_DelDir_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFileSize_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteToFile_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadFromFile_;
    const ::grpc::internal::RpcMethod rpcmethod_AddFileSeg_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFileSeg_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChildren_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllChildren_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSpaceSize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    // rpc SayHello (HelloRequest) returns (HelloReply) {};
    virtual ::grpc::Status AddEmptyFile(::grpc::ServerContext* context, const ::fsndnproto::AddEmptyFileRequest* request, ::fsndnproto::IntReply* response);
    virtual ::grpc::Status AddNewFile(::grpc::ServerContext* context, const ::fsndnproto::AddNewFileRequest* request, ::fsndnproto::IntReply* response);
    virtual ::grpc::Status DelFile(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::IntReply* response);
    virtual ::grpc::Status DelDir(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::IntReply* response);
    virtual ::grpc::Status GetFileSize(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::LongReply* response);
    virtual ::grpc::Status WriteToFile(::grpc::ServerContext* context, const ::fsndnproto::WriteRequest* request, ::fsndnproto::IntReply* response);
    virtual ::grpc::Status ReadFromFile(::grpc::ServerContext* context, const ::fsndnproto::ReadRequest* request, ::fsndnproto::ReadReply* response);
    virtual ::grpc::Status AddFileSeg(::grpc::ServerContext* context, const ::fsndnproto::AddFileSegRequest* request, ::fsndnproto::IntReply* response);
    virtual ::grpc::Status GetFileSeg(::grpc::ServerContext* context, const ::fsndnproto::GetFileSegRequest* request, ::fsndnproto::ReadReply* response);
    virtual ::grpc::Status GetChildren(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::ChildrenReply* response);
    virtual ::grpc::Status GetAllChildren(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::ChildrenReply* response);
    virtual ::grpc::Status GetSpaceSize(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::LongReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddEmptyFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddEmptyFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddEmptyFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmptyFile(::grpc::ServerContext* context, const ::fsndnproto::AddEmptyFileRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEmptyFile(::grpc::ServerContext* context, ::fsndnproto::AddEmptyFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::fsndnproto::IntReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddNewFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddNewFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddNewFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNewFile(::grpc::ServerContext* context, const ::fsndnproto::AddNewFileRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNewFile(::grpc::ServerContext* context, ::fsndnproto::AddNewFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::fsndnproto::IntReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DelFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DelFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelFile(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelFile(::grpc::ServerContext* context, ::fsndnproto::FileNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::fsndnproto::IntReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DelDir() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DelDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelDir(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelDir(::grpc::ServerContext* context, ::fsndnproto::PrefixRequest* request, ::grpc::ServerAsyncResponseWriter< ::fsndnproto::IntReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFileSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetFileSize() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetFileSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSize(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::LongReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileSize(::grpc::ServerContext* context, ::fsndnproto::FileNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::fsndnproto::LongReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_WriteToFile() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_WriteToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteToFile(::grpc::ServerContext* context, const ::fsndnproto::WriteRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteToFile(::grpc::ServerContext* context, ::fsndnproto::WriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::fsndnproto::IntReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReadFromFile() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ReadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFromFile(::grpc::ServerContext* context, const ::fsndnproto::ReadRequest* request, ::fsndnproto::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadFromFile(::grpc::ServerContext* context, ::fsndnproto::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::fsndnproto::ReadReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddFileSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddFileSeg() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_AddFileSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFileSeg(::grpc::ServerContext* context, const ::fsndnproto::AddFileSegRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFileSeg(::grpc::ServerContext* context, ::fsndnproto::AddFileSegRequest* request, ::grpc::ServerAsyncResponseWriter< ::fsndnproto::IntReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFileSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetFileSeg() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetFileSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSeg(::grpc::ServerContext* context, const ::fsndnproto::GetFileSegRequest* request, ::fsndnproto::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileSeg(::grpc::ServerContext* context, ::fsndnproto::GetFileSegRequest* request, ::grpc::ServerAsyncResponseWriter< ::fsndnproto::ReadReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetChildren() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::ChildrenReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChildren(::grpc::ServerContext* context, ::fsndnproto::PrefixRequest* request, ::grpc::ServerAsyncResponseWriter< ::fsndnproto::ChildrenReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAllChildren() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetAllChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllChildren(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::ChildrenReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllChildren(::grpc::ServerContext* context, ::fsndnproto::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::fsndnproto::ChildrenReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSpaceSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSpaceSize() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetSpaceSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpaceSize(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::LongReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpaceSize(::grpc::ServerContext* context, ::fsndnproto::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::fsndnproto::LongReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddEmptyFile<WithAsyncMethod_AddNewFile<WithAsyncMethod_DelFile<WithAsyncMethod_DelDir<WithAsyncMethod_GetFileSize<WithAsyncMethod_WriteToFile<WithAsyncMethod_ReadFromFile<WithAsyncMethod_AddFileSeg<WithAsyncMethod_GetFileSeg<WithAsyncMethod_GetChildren<WithAsyncMethod_GetAllChildren<WithAsyncMethod_GetSpaceSize<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddEmptyFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AddEmptyFile() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::fsndnproto::AddEmptyFileRequest, ::fsndnproto::IntReply>(
          [this](::grpc::ServerContext* context,
                 const ::fsndnproto::AddEmptyFileRequest* request,
                 ::fsndnproto::IntReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddEmptyFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_AddEmptyFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmptyFile(::grpc::ServerContext* context, const ::fsndnproto::AddEmptyFileRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddEmptyFile(::grpc::ServerContext* context, const ::fsndnproto::AddEmptyFileRequest* request, ::fsndnproto::IntReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddNewFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AddNewFile() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::fsndnproto::AddNewFileRequest, ::fsndnproto::IntReply>(
          [this](::grpc::ServerContext* context,
                 const ::fsndnproto::AddNewFileRequest* request,
                 ::fsndnproto::IntReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddNewFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_AddNewFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNewFile(::grpc::ServerContext* context, const ::fsndnproto::AddNewFileRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddNewFile(::grpc::ServerContext* context, const ::fsndnproto::AddNewFileRequest* request, ::fsndnproto::IntReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DelFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DelFile() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::fsndnproto::FileNameRequest, ::fsndnproto::IntReply>(
          [this](::grpc::ServerContext* context,
                 const ::fsndnproto::FileNameRequest* request,
                 ::fsndnproto::IntReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DelFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_DelFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelFile(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DelFile(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::IntReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DelDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DelDir() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::fsndnproto::PrefixRequest, ::fsndnproto::IntReply>(
          [this](::grpc::ServerContext* context,
                 const ::fsndnproto::PrefixRequest* request,
                 ::fsndnproto::IntReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DelDir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_DelDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelDir(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DelDir(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::IntReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFileSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetFileSize() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::fsndnproto::FileNameRequest, ::fsndnproto::LongReply>(
          [this](::grpc::ServerContext* context,
                 const ::fsndnproto::FileNameRequest* request,
                 ::fsndnproto::LongReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetFileSize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetFileSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSize(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::LongReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetFileSize(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::LongReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WriteToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_WriteToFile() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::fsndnproto::WriteRequest, ::fsndnproto::IntReply>(
          [this](::grpc::ServerContext* context,
                 const ::fsndnproto::WriteRequest* request,
                 ::fsndnproto::IntReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->WriteToFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_WriteToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteToFile(::grpc::ServerContext* context, const ::fsndnproto::WriteRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void WriteToFile(::grpc::ServerContext* context, const ::fsndnproto::WriteRequest* request, ::fsndnproto::IntReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ReadFromFile() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::fsndnproto::ReadRequest, ::fsndnproto::ReadReply>(
          [this](::grpc::ServerContext* context,
                 const ::fsndnproto::ReadRequest* request,
                 ::fsndnproto::ReadReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ReadFromFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ReadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFromFile(::grpc::ServerContext* context, const ::fsndnproto::ReadRequest* request, ::fsndnproto::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReadFromFile(::grpc::ServerContext* context, const ::fsndnproto::ReadRequest* request, ::fsndnproto::ReadReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddFileSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AddFileSeg() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::fsndnproto::AddFileSegRequest, ::fsndnproto::IntReply>(
          [this](::grpc::ServerContext* context,
                 const ::fsndnproto::AddFileSegRequest* request,
                 ::fsndnproto::IntReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddFileSeg(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_AddFileSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFileSeg(::grpc::ServerContext* context, const ::fsndnproto::AddFileSegRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddFileSeg(::grpc::ServerContext* context, const ::fsndnproto::AddFileSegRequest* request, ::fsndnproto::IntReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetFileSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetFileSeg() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::fsndnproto::GetFileSegRequest, ::fsndnproto::ReadReply>(
          [this](::grpc::ServerContext* context,
                 const ::fsndnproto::GetFileSegRequest* request,
                 ::fsndnproto::ReadReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetFileSeg(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetFileSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSeg(::grpc::ServerContext* context, const ::fsndnproto::GetFileSegRequest* request, ::fsndnproto::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetFileSeg(::grpc::ServerContext* context, const ::fsndnproto::GetFileSegRequest* request, ::fsndnproto::ReadReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetChildren() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::fsndnproto::PrefixRequest, ::fsndnproto::ChildrenReply>(
          [this](::grpc::ServerContext* context,
                 const ::fsndnproto::PrefixRequest* request,
                 ::fsndnproto::ChildrenReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetChildren(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::ChildrenReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetChildren(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::ChildrenReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAllChildren() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::fsndnproto::EmptyRequest, ::fsndnproto::ChildrenReply>(
          [this](::grpc::ServerContext* context,
                 const ::fsndnproto::EmptyRequest* request,
                 ::fsndnproto::ChildrenReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetAllChildren(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetAllChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllChildren(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::ChildrenReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAllChildren(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::ChildrenReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSpaceSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetSpaceSize() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::fsndnproto::EmptyRequest, ::fsndnproto::LongReply>(
          [this](::grpc::ServerContext* context,
                 const ::fsndnproto::EmptyRequest* request,
                 ::fsndnproto::LongReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetSpaceSize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_GetSpaceSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpaceSize(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::LongReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSpaceSize(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::LongReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_AddEmptyFile<ExperimentalWithCallbackMethod_AddNewFile<ExperimentalWithCallbackMethod_DelFile<ExperimentalWithCallbackMethod_DelDir<ExperimentalWithCallbackMethod_GetFileSize<ExperimentalWithCallbackMethod_WriteToFile<ExperimentalWithCallbackMethod_ReadFromFile<ExperimentalWithCallbackMethod_AddFileSeg<ExperimentalWithCallbackMethod_GetFileSeg<ExperimentalWithCallbackMethod_GetChildren<ExperimentalWithCallbackMethod_GetAllChildren<ExperimentalWithCallbackMethod_GetSpaceSize<Service > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddEmptyFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddEmptyFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddEmptyFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmptyFile(::grpc::ServerContext* context, const ::fsndnproto::AddEmptyFileRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddNewFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddNewFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddNewFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNewFile(::grpc::ServerContext* context, const ::fsndnproto::AddNewFileRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DelFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DelFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelFile(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DelDir() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DelDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelDir(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFileSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetFileSize() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetFileSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSize(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::LongReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_WriteToFile() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_WriteToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteToFile(::grpc::ServerContext* context, const ::fsndnproto::WriteRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReadFromFile() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ReadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFromFile(::grpc::ServerContext* context, const ::fsndnproto::ReadRequest* request, ::fsndnproto::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddFileSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddFileSeg() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_AddFileSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFileSeg(::grpc::ServerContext* context, const ::fsndnproto::AddFileSegRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFileSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetFileSeg() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetFileSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSeg(::grpc::ServerContext* context, const ::fsndnproto::GetFileSegRequest* request, ::fsndnproto::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetChildren() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::ChildrenReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAllChildren() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetAllChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllChildren(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::ChildrenReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSpaceSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSpaceSize() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetSpaceSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpaceSize(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::LongReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddEmptyFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddEmptyFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddEmptyFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmptyFile(::grpc::ServerContext* context, const ::fsndnproto::AddEmptyFileRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEmptyFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddNewFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddNewFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddNewFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNewFile(::grpc::ServerContext* context, const ::fsndnproto::AddNewFileRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNewFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DelFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DelFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DelFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelFile(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DelDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DelDir() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DelDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelDir(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelDir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFileSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetFileSize() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetFileSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSize(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::LongReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_WriteToFile() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_WriteToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteToFile(::grpc::ServerContext* context, const ::fsndnproto::WriteRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteToFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReadFromFile() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ReadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFromFile(::grpc::ServerContext* context, const ::fsndnproto::ReadRequest* request, ::fsndnproto::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadFromFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddFileSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddFileSeg() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_AddFileSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFileSeg(::grpc::ServerContext* context, const ::fsndnproto::AddFileSegRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddFileSeg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFileSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetFileSeg() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetFileSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSeg(::grpc::ServerContext* context, const ::fsndnproto::GetFileSegRequest* request, ::fsndnproto::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileSeg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetChildren() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::ChildrenReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChildren(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAllChildren() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetAllChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllChildren(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::ChildrenReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllChildren(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSpaceSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetSpaceSize() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetSpaceSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpaceSize(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::LongReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSpaceSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddEmptyFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AddEmptyFile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddEmptyFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddEmptyFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEmptyFile(::grpc::ServerContext* context, const ::fsndnproto::AddEmptyFileRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddEmptyFile(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddNewFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AddNewFile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddNewFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddNewFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNewFile(::grpc::ServerContext* context, const ::fsndnproto::AddNewFileRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddNewFile(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DelFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DelFile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DelFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DelFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelFile(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DelFile(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DelDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DelDir() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DelDir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DelDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelDir(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DelDir(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFileSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFileSize() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetFileSize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFileSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSize(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::LongReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetFileSize(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WriteToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_WriteToFile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->WriteToFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_WriteToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteToFile(::grpc::ServerContext* context, const ::fsndnproto::WriteRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void WriteToFile(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ReadFromFile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReadFromFile(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ReadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadFromFile(::grpc::ServerContext* context, const ::fsndnproto::ReadRequest* request, ::fsndnproto::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReadFromFile(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddFileSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AddFileSeg() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddFileSeg(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddFileSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddFileSeg(::grpc::ServerContext* context, const ::fsndnproto::AddFileSegRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddFileSeg(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetFileSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetFileSeg() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetFileSeg(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetFileSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileSeg(::grpc::ServerContext* context, const ::fsndnproto::GetFileSegRequest* request, ::fsndnproto::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetFileSeg(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetChildren() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetChildren(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::ChildrenReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetChildren(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllChildren() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAllChildren(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllChildren(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::ChildrenReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAllChildren(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSpaceSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSpaceSize() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetSpaceSize(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSpaceSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSpaceSize(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::LongReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSpaceSize(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddEmptyFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddEmptyFile() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::fsndnproto::AddEmptyFileRequest, ::fsndnproto::IntReply>(std::bind(&WithStreamedUnaryMethod_AddEmptyFile<BaseClass>::StreamedAddEmptyFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddEmptyFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddEmptyFile(::grpc::ServerContext* context, const ::fsndnproto::AddEmptyFileRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddEmptyFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fsndnproto::AddEmptyFileRequest,::fsndnproto::IntReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddNewFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddNewFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::fsndnproto::AddNewFileRequest, ::fsndnproto::IntReply>(std::bind(&WithStreamedUnaryMethod_AddNewFile<BaseClass>::StreamedAddNewFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddNewFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddNewFile(::grpc::ServerContext* context, const ::fsndnproto::AddNewFileRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddNewFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fsndnproto::AddNewFileRequest,::fsndnproto::IntReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DelFile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::fsndnproto::FileNameRequest, ::fsndnproto::IntReply>(std::bind(&WithStreamedUnaryMethod_DelFile<BaseClass>::StreamedDelFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DelFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelFile(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fsndnproto::FileNameRequest,::fsndnproto::IntReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DelDir() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::fsndnproto::PrefixRequest, ::fsndnproto::IntReply>(std::bind(&WithStreamedUnaryMethod_DelDir<BaseClass>::StreamedDelDir, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DelDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelDir(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelDir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fsndnproto::PrefixRequest,::fsndnproto::IntReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFileSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetFileSize() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::fsndnproto::FileNameRequest, ::fsndnproto::LongReply>(std::bind(&WithStreamedUnaryMethod_GetFileSize<BaseClass>::StreamedGetFileSize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetFileSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFileSize(::grpc::ServerContext* context, const ::fsndnproto::FileNameRequest* request, ::fsndnproto::LongReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFileSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fsndnproto::FileNameRequest,::fsndnproto::LongReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_WriteToFile() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::fsndnproto::WriteRequest, ::fsndnproto::IntReply>(std::bind(&WithStreamedUnaryMethod_WriteToFile<BaseClass>::StreamedWriteToFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_WriteToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteToFile(::grpc::ServerContext* context, const ::fsndnproto::WriteRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteToFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fsndnproto::WriteRequest,::fsndnproto::IntReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReadFromFile() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::fsndnproto::ReadRequest, ::fsndnproto::ReadReply>(std::bind(&WithStreamedUnaryMethod_ReadFromFile<BaseClass>::StreamedReadFromFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadFromFile(::grpc::ServerContext* context, const ::fsndnproto::ReadRequest* request, ::fsndnproto::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadFromFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fsndnproto::ReadRequest,::fsndnproto::ReadReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddFileSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddFileSeg() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::fsndnproto::AddFileSegRequest, ::fsndnproto::IntReply>(std::bind(&WithStreamedUnaryMethod_AddFileSeg<BaseClass>::StreamedAddFileSeg, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddFileSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddFileSeg(::grpc::ServerContext* context, const ::fsndnproto::AddFileSegRequest* request, ::fsndnproto::IntReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddFileSeg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fsndnproto::AddFileSegRequest,::fsndnproto::IntReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFileSeg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetFileSeg() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::fsndnproto::GetFileSegRequest, ::fsndnproto::ReadReply>(std::bind(&WithStreamedUnaryMethod_GetFileSeg<BaseClass>::StreamedGetFileSeg, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetFileSeg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFileSeg(::grpc::ServerContext* context, const ::fsndnproto::GetFileSegRequest* request, ::fsndnproto::ReadReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFileSeg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fsndnproto::GetFileSegRequest,::fsndnproto::ReadReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetChildren() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::fsndnproto::PrefixRequest, ::fsndnproto::ChildrenReply>(std::bind(&WithStreamedUnaryMethod_GetChildren<BaseClass>::StreamedGetChildren, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChildren(::grpc::ServerContext* context, const ::fsndnproto::PrefixRequest* request, ::fsndnproto::ChildrenReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChildren(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fsndnproto::PrefixRequest,::fsndnproto::ChildrenReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllChildren : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAllChildren() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::fsndnproto::EmptyRequest, ::fsndnproto::ChildrenReply>(std::bind(&WithStreamedUnaryMethod_GetAllChildren<BaseClass>::StreamedGetAllChildren, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAllChildren() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllChildren(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::ChildrenReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllChildren(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fsndnproto::EmptyRequest,::fsndnproto::ChildrenReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSpaceSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSpaceSize() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::fsndnproto::EmptyRequest, ::fsndnproto::LongReply>(std::bind(&WithStreamedUnaryMethod_GetSpaceSize<BaseClass>::StreamedGetSpaceSize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSpaceSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSpaceSize(::grpc::ServerContext* context, const ::fsndnproto::EmptyRequest* request, ::fsndnproto::LongReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSpaceSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::fsndnproto::EmptyRequest,::fsndnproto::LongReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddEmptyFile<WithStreamedUnaryMethod_AddNewFile<WithStreamedUnaryMethod_DelFile<WithStreamedUnaryMethod_DelDir<WithStreamedUnaryMethod_GetFileSize<WithStreamedUnaryMethod_WriteToFile<WithStreamedUnaryMethod_ReadFromFile<WithStreamedUnaryMethod_AddFileSeg<WithStreamedUnaryMethod_GetFileSeg<WithStreamedUnaryMethod_GetChildren<WithStreamedUnaryMethod_GetAllChildren<WithStreamedUnaryMethod_GetSpaceSize<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddEmptyFile<WithStreamedUnaryMethod_AddNewFile<WithStreamedUnaryMethod_DelFile<WithStreamedUnaryMethod_DelDir<WithStreamedUnaryMethod_GetFileSize<WithStreamedUnaryMethod_WriteToFile<WithStreamedUnaryMethod_ReadFromFile<WithStreamedUnaryMethod_AddFileSeg<WithStreamedUnaryMethod_GetFileSeg<WithStreamedUnaryMethod_GetChildren<WithStreamedUnaryMethod_GetAllChildren<WithStreamedUnaryMethod_GetSpaceSize<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace fsndnproto


#endif  // GRPC_fsndn_2eproto__INCLUDED
