// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsndn.proto

#ifndef PROTOBUF_INCLUDED_fsndn_2eproto
#define PROTOBUF_INCLUDED_fsndn_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fsndn_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_fsndn_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_fsndn_2eproto();
namespace fsndnproto {
class AddEmptyFileRequest;
class AddEmptyFileRequestDefaultTypeInternal;
extern AddEmptyFileRequestDefaultTypeInternal _AddEmptyFileRequest_default_instance_;
class AddFileSegRequest;
class AddFileSegRequestDefaultTypeInternal;
extern AddFileSegRequestDefaultTypeInternal _AddFileSegRequest_default_instance_;
class AddNewFileRequest;
class AddNewFileRequestDefaultTypeInternal;
extern AddNewFileRequestDefaultTypeInternal _AddNewFileRequest_default_instance_;
class ChildrenReply;
class ChildrenReplyDefaultTypeInternal;
extern ChildrenReplyDefaultTypeInternal _ChildrenReply_default_instance_;
class EmptyRequest;
class EmptyRequestDefaultTypeInternal;
extern EmptyRequestDefaultTypeInternal _EmptyRequest_default_instance_;
class FileNameRequest;
class FileNameRequestDefaultTypeInternal;
extern FileNameRequestDefaultTypeInternal _FileNameRequest_default_instance_;
class GetFileSegRequest;
class GetFileSegRequestDefaultTypeInternal;
extern GetFileSegRequestDefaultTypeInternal _GetFileSegRequest_default_instance_;
class IntReply;
class IntReplyDefaultTypeInternal;
extern IntReplyDefaultTypeInternal _IntReply_default_instance_;
class LongReply;
class LongReplyDefaultTypeInternal;
extern LongReplyDefaultTypeInternal _LongReply_default_instance_;
class PrefixRequest;
class PrefixRequestDefaultTypeInternal;
extern PrefixRequestDefaultTypeInternal _PrefixRequest_default_instance_;
class ReadReply;
class ReadReplyDefaultTypeInternal;
extern ReadReplyDefaultTypeInternal _ReadReply_default_instance_;
class ReadRequest;
class ReadRequestDefaultTypeInternal;
extern ReadRequestDefaultTypeInternal _ReadRequest_default_instance_;
class WriteRequest;
class WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
}  // namespace fsndnproto
namespace google {
namespace protobuf {
template<> ::fsndnproto::AddEmptyFileRequest* Arena::CreateMaybeMessage<::fsndnproto::AddEmptyFileRequest>(Arena*);
template<> ::fsndnproto::AddFileSegRequest* Arena::CreateMaybeMessage<::fsndnproto::AddFileSegRequest>(Arena*);
template<> ::fsndnproto::AddNewFileRequest* Arena::CreateMaybeMessage<::fsndnproto::AddNewFileRequest>(Arena*);
template<> ::fsndnproto::ChildrenReply* Arena::CreateMaybeMessage<::fsndnproto::ChildrenReply>(Arena*);
template<> ::fsndnproto::EmptyRequest* Arena::CreateMaybeMessage<::fsndnproto::EmptyRequest>(Arena*);
template<> ::fsndnproto::FileNameRequest* Arena::CreateMaybeMessage<::fsndnproto::FileNameRequest>(Arena*);
template<> ::fsndnproto::GetFileSegRequest* Arena::CreateMaybeMessage<::fsndnproto::GetFileSegRequest>(Arena*);
template<> ::fsndnproto::IntReply* Arena::CreateMaybeMessage<::fsndnproto::IntReply>(Arena*);
template<> ::fsndnproto::LongReply* Arena::CreateMaybeMessage<::fsndnproto::LongReply>(Arena*);
template<> ::fsndnproto::PrefixRequest* Arena::CreateMaybeMessage<::fsndnproto::PrefixRequest>(Arena*);
template<> ::fsndnproto::ReadReply* Arena::CreateMaybeMessage<::fsndnproto::ReadReply>(Arena*);
template<> ::fsndnproto::ReadRequest* Arena::CreateMaybeMessage<::fsndnproto::ReadRequest>(Arena*);
template<> ::fsndnproto::WriteRequest* Arena::CreateMaybeMessage<::fsndnproto::WriteRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fsndnproto {

// ===================================================================

class AddEmptyFileRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsndnproto.AddEmptyFileRequest) */ {
 public:
  AddEmptyFileRequest();
  virtual ~AddEmptyFileRequest();

  AddEmptyFileRequest(const AddEmptyFileRequest& from);

  inline AddEmptyFileRequest& operator=(const AddEmptyFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddEmptyFileRequest(AddEmptyFileRequest&& from) noexcept
    : AddEmptyFileRequest() {
    *this = ::std::move(from);
  }

  inline AddEmptyFileRequest& operator=(AddEmptyFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddEmptyFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddEmptyFileRequest* internal_default_instance() {
    return reinterpret_cast<const AddEmptyFileRequest*>(
               &_AddEmptyFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AddEmptyFileRequest* other);
  friend void swap(AddEmptyFileRequest& a, AddEmptyFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddEmptyFileRequest* New() const final {
    return CreateMaybeMessage<AddEmptyFileRequest>(nullptr);
  }

  AddEmptyFileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddEmptyFileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddEmptyFileRequest& from);
  void MergeFrom(const AddEmptyFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddEmptyFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // fixed64 mtime = 2;
  void clear_mtime();
  static const int kMtimeFieldNumber = 2;
  ::google::protobuf::uint64 mtime() const;
  void set_mtime(::google::protobuf::uint64 value);

  // fixed64 atime = 3;
  void clear_atime();
  static const int kAtimeFieldNumber = 3;
  ::google::protobuf::uint64 atime() const;
  void set_atime(::google::protobuf::uint64 value);

  // fixed64 ctime = 4;
  void clear_ctime();
  static const int kCtimeFieldNumber = 4;
  ::google::protobuf::uint64 ctime() const;
  void set_ctime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fsndnproto.AddEmptyFileRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 mtime_;
  ::google::protobuf::uint64 atime_;
  ::google::protobuf::uint64 ctime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fsndn_2eproto;
};
// -------------------------------------------------------------------

class AddNewFileRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsndnproto.AddNewFileRequest) */ {
 public:
  AddNewFileRequest();
  virtual ~AddNewFileRequest();

  AddNewFileRequest(const AddNewFileRequest& from);

  inline AddNewFileRequest& operator=(const AddNewFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddNewFileRequest(AddNewFileRequest&& from) noexcept
    : AddNewFileRequest() {
    *this = ::std::move(from);
  }

  inline AddNewFileRequest& operator=(AddNewFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddNewFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddNewFileRequest* internal_default_instance() {
    return reinterpret_cast<const AddNewFileRequest*>(
               &_AddNewFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AddNewFileRequest* other);
  friend void swap(AddNewFileRequest& a, AddNewFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddNewFileRequest* New() const final {
    return CreateMaybeMessage<AddNewFileRequest>(nullptr);
  }

  AddNewFileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddNewFileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddNewFileRequest& from);
  void MergeFrom(const AddNewFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNewFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // int64 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // fixed64 mtime = 4;
  void clear_mtime();
  static const int kMtimeFieldNumber = 4;
  ::google::protobuf::uint64 mtime() const;
  void set_mtime(::google::protobuf::uint64 value);

  // fixed64 atime = 5;
  void clear_atime();
  static const int kAtimeFieldNumber = 5;
  ::google::protobuf::uint64 atime() const;
  void set_atime(::google::protobuf::uint64 value);

  // fixed64 ctime = 6;
  void clear_ctime();
  static const int kCtimeFieldNumber = 6;
  ::google::protobuf::uint64 ctime() const;
  void set_ctime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:fsndnproto.AddNewFileRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int64 size_;
  ::google::protobuf::uint64 mtime_;
  ::google::protobuf::uint64 atime_;
  ::google::protobuf::uint64 ctime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fsndn_2eproto;
};
// -------------------------------------------------------------------

class FileNameRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsndnproto.FileNameRequest) */ {
 public:
  FileNameRequest();
  virtual ~FileNameRequest();

  FileNameRequest(const FileNameRequest& from);

  inline FileNameRequest& operator=(const FileNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileNameRequest(FileNameRequest&& from) noexcept
    : FileNameRequest() {
    *this = ::std::move(from);
  }

  inline FileNameRequest& operator=(FileNameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileNameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileNameRequest* internal_default_instance() {
    return reinterpret_cast<const FileNameRequest*>(
               &_FileNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FileNameRequest* other);
  friend void swap(FileNameRequest& a, FileNameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileNameRequest* New() const final {
    return CreateMaybeMessage<FileNameRequest>(nullptr);
  }

  FileNameRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileNameRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileNameRequest& from);
  void MergeFrom(const FileNameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileNameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:fsndnproto.FileNameRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fsndn_2eproto;
};
// -------------------------------------------------------------------

class PrefixRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsndnproto.PrefixRequest) */ {
 public:
  PrefixRequest();
  virtual ~PrefixRequest();

  PrefixRequest(const PrefixRequest& from);

  inline PrefixRequest& operator=(const PrefixRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrefixRequest(PrefixRequest&& from) noexcept
    : PrefixRequest() {
    *this = ::std::move(from);
  }

  inline PrefixRequest& operator=(PrefixRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PrefixRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrefixRequest* internal_default_instance() {
    return reinterpret_cast<const PrefixRequest*>(
               &_PrefixRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PrefixRequest* other);
  friend void swap(PrefixRequest& a, PrefixRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrefixRequest* New() const final {
    return CreateMaybeMessage<PrefixRequest>(nullptr);
  }

  PrefixRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrefixRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrefixRequest& from);
  void MergeFrom(const PrefixRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrefixRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string prefix = 1;
  void clear_prefix();
  static const int kPrefixFieldNumber = 1;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix(::std::string&& value);
  #endif
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // @@protoc_insertion_point(class_scope:fsndnproto.PrefixRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fsndn_2eproto;
};
// -------------------------------------------------------------------

class ReadRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsndnproto.ReadRequest) */ {
 public:
  ReadRequest();
  virtual ~ReadRequest();

  ReadRequest(const ReadRequest& from);

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadRequest(ReadRequest&& from) noexcept
    : ReadRequest() {
    *this = ::std::move(from);
  }

  inline ReadRequest& operator=(ReadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRequest*>(
               &_ReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReadRequest* other);
  friend void swap(ReadRequest& a, ReadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const final {
    return CreateMaybeMessage<ReadRequest>(nullptr);
  }

  ReadRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadRequest& from);
  void MergeFrom(const ReadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:fsndnproto.ReadRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fsndn_2eproto;
};
// -------------------------------------------------------------------

class WriteRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsndnproto.WriteRequest) */ {
 public:
  WriteRequest();
  virtual ~WriteRequest();

  WriteRequest(const WriteRequest& from);

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WriteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(WriteRequest* other);
  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WriteRequest* New() const final {
    return CreateMaybeMessage<WriteRequest>(nullptr);
  }

  WriteRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WriteRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WriteRequest& from);
  void MergeFrom(const WriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // int64 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:fsndnproto.WriteRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int64 size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fsndn_2eproto;
};
// -------------------------------------------------------------------

class AddFileSegRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsndnproto.AddFileSegRequest) */ {
 public:
  AddFileSegRequest();
  virtual ~AddFileSegRequest();

  AddFileSegRequest(const AddFileSegRequest& from);

  inline AddFileSegRequest& operator=(const AddFileSegRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddFileSegRequest(AddFileSegRequest&& from) noexcept
    : AddFileSegRequest() {
    *this = ::std::move(from);
  }

  inline AddFileSegRequest& operator=(AddFileSegRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddFileSegRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFileSegRequest* internal_default_instance() {
    return reinterpret_cast<const AddFileSegRequest*>(
               &_AddFileSegRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AddFileSegRequest* other);
  friend void swap(AddFileSegRequest& a, AddFileSegRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddFileSegRequest* New() const final {
    return CreateMaybeMessage<AddFileSegRequest>(nullptr);
  }

  AddFileSegRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddFileSegRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddFileSegRequest& from);
  void MergeFrom(const AddFileSegRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFileSegRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // int32 size = 3;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // int32 seg = 4;
  void clear_seg();
  static const int kSegFieldNumber = 4;
  ::google::protobuf::int32 seg() const;
  void set_seg(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fsndnproto.AddFileSegRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 seg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fsndn_2eproto;
};
// -------------------------------------------------------------------

class GetFileSegRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsndnproto.GetFileSegRequest) */ {
 public:
  GetFileSegRequest();
  virtual ~GetFileSegRequest();

  GetFileSegRequest(const GetFileSegRequest& from);

  inline GetFileSegRequest& operator=(const GetFileSegRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFileSegRequest(GetFileSegRequest&& from) noexcept
    : GetFileSegRequest() {
    *this = ::std::move(from);
  }

  inline GetFileSegRequest& operator=(GetFileSegRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetFileSegRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFileSegRequest* internal_default_instance() {
    return reinterpret_cast<const GetFileSegRequest*>(
               &_GetFileSegRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetFileSegRequest* other);
  friend void swap(GetFileSegRequest& a, GetFileSegRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFileSegRequest* New() const final {
    return CreateMaybeMessage<GetFileSegRequest>(nullptr);
  }

  GetFileSegRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetFileSegRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetFileSegRequest& from);
  void MergeFrom(const GetFileSegRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFileSegRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // int32 seg = 3;
  void clear_seg();
  static const int kSegFieldNumber = 3;
  ::google::protobuf::int32 seg() const;
  void set_seg(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fsndnproto.GetFileSegRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 seg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fsndn_2eproto;
};
// -------------------------------------------------------------------

class EmptyRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsndnproto.EmptyRequest) */ {
 public:
  EmptyRequest();
  virtual ~EmptyRequest();

  EmptyRequest(const EmptyRequest& from);

  inline EmptyRequest& operator=(const EmptyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmptyRequest(EmptyRequest&& from) noexcept
    : EmptyRequest() {
    *this = ::std::move(from);
  }

  inline EmptyRequest& operator=(EmptyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EmptyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyRequest* internal_default_instance() {
    return reinterpret_cast<const EmptyRequest*>(
               &_EmptyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(EmptyRequest* other);
  friend void swap(EmptyRequest& a, EmptyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmptyRequest* New() const final {
    return CreateMaybeMessage<EmptyRequest>(nullptr);
  }

  EmptyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmptyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmptyRequest& from);
  void MergeFrom(const EmptyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fsndnproto.EmptyRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fsndn_2eproto;
};
// -------------------------------------------------------------------

class IntReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsndnproto.IntReply) */ {
 public:
  IntReply();
  virtual ~IntReply();

  IntReply(const IntReply& from);

  inline IntReply& operator=(const IntReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntReply(IntReply&& from) noexcept
    : IntReply() {
    *this = ::std::move(from);
  }

  inline IntReply& operator=(IntReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IntReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntReply* internal_default_instance() {
    return reinterpret_cast<const IntReply*>(
               &_IntReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(IntReply* other);
  friend void swap(IntReply& a, IntReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntReply* New() const final {
    return CreateMaybeMessage<IntReply>(nullptr);
  }

  IntReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntReply& from);
  void MergeFrom(const IntReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // sint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fsndnproto.IntReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fsndn_2eproto;
};
// -------------------------------------------------------------------

class LongReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsndnproto.LongReply) */ {
 public:
  LongReply();
  virtual ~LongReply();

  LongReply(const LongReply& from);

  inline LongReply& operator=(const LongReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LongReply(LongReply&& from) noexcept
    : LongReply() {
    *this = ::std::move(from);
  }

  inline LongReply& operator=(LongReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LongReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LongReply* internal_default_instance() {
    return reinterpret_cast<const LongReply*>(
               &_LongReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(LongReply* other);
  friend void swap(LongReply& a, LongReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LongReply* New() const final {
    return CreateMaybeMessage<LongReply>(nullptr);
  }

  LongReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LongReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LongReply& from);
  void MergeFrom(const LongReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int64 result() const;
  void set_result(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:fsndnproto.LongReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fsndn_2eproto;
};
// -------------------------------------------------------------------

class ReadReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsndnproto.ReadReply) */ {
 public:
  ReadReply();
  virtual ~ReadReply();

  ReadReply(const ReadReply& from);

  inline ReadReply& operator=(const ReadReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadReply(ReadReply&& from) noexcept
    : ReadReply() {
    *this = ::std::move(from);
  }

  inline ReadReply& operator=(ReadReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReadReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReply* internal_default_instance() {
    return reinterpret_cast<const ReadReply*>(
               &_ReadReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ReadReply* other);
  friend void swap(ReadReply& a, ReadReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadReply* New() const final {
    return CreateMaybeMessage<ReadReply>(nullptr);
  }

  ReadReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadReply& from);
  void MergeFrom(const ReadReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes buffer = 1;
  void clear_buffer();
  static const int kBufferFieldNumber = 1;
  const ::std::string& buffer() const;
  void set_buffer(const ::std::string& value);
  #if LANG_CXX11
  void set_buffer(::std::string&& value);
  #endif
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  ::std::string* mutable_buffer();
  ::std::string* release_buffer();
  void set_allocated_buffer(::std::string* buffer);

  // @@protoc_insertion_point(class_scope:fsndnproto.ReadReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr buffer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fsndn_2eproto;
};
// -------------------------------------------------------------------

class ChildrenReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fsndnproto.ChildrenReply) */ {
 public:
  ChildrenReply();
  virtual ~ChildrenReply();

  ChildrenReply(const ChildrenReply& from);

  inline ChildrenReply& operator=(const ChildrenReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChildrenReply(ChildrenReply&& from) noexcept
    : ChildrenReply() {
    *this = ::std::move(from);
  }

  inline ChildrenReply& operator=(ChildrenReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ChildrenReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChildrenReply* internal_default_instance() {
    return reinterpret_cast<const ChildrenReply*>(
               &_ChildrenReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ChildrenReply* other);
  friend void swap(ChildrenReply& a, ChildrenReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChildrenReply* New() const final {
    return CreateMaybeMessage<ChildrenReply>(nullptr);
  }

  ChildrenReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChildrenReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChildrenReply& from);
  void MergeFrom(const ChildrenReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChildrenReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string children = 1;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 1;
  const ::std::string& children(int index) const;
  ::std::string* mutable_children(int index);
  void set_children(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_children(int index, ::std::string&& value);
  #endif
  void set_children(int index, const char* value);
  void set_children(int index, const char* value, size_t size);
  ::std::string* add_children();
  void add_children(const ::std::string& value);
  #if LANG_CXX11
  void add_children(::std::string&& value);
  #endif
  void add_children(const char* value);
  void add_children(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& children() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_children();

  // @@protoc_insertion_point(class_scope:fsndnproto.ChildrenReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> children_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fsndn_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddEmptyFileRequest

// string name = 1;
inline void AddEmptyFileRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddEmptyFileRequest::name() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddEmptyFileRequest.name)
  return name_.GetNoArena();
}
inline void AddEmptyFileRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fsndnproto.AddEmptyFileRequest.name)
}
#if LANG_CXX11
inline void AddEmptyFileRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fsndnproto.AddEmptyFileRequest.name)
}
#endif
inline void AddEmptyFileRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fsndnproto.AddEmptyFileRequest.name)
}
inline void AddEmptyFileRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fsndnproto.AddEmptyFileRequest.name)
}
inline ::std::string* AddEmptyFileRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fsndnproto.AddEmptyFileRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddEmptyFileRequest::release_name() {
  // @@protoc_insertion_point(field_release:fsndnproto.AddEmptyFileRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddEmptyFileRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fsndnproto.AddEmptyFileRequest.name)
}

// fixed64 mtime = 2;
inline void AddEmptyFileRequest::clear_mtime() {
  mtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddEmptyFileRequest::mtime() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddEmptyFileRequest.mtime)
  return mtime_;
}
inline void AddEmptyFileRequest::set_mtime(::google::protobuf::uint64 value) {
  
  mtime_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.AddEmptyFileRequest.mtime)
}

// fixed64 atime = 3;
inline void AddEmptyFileRequest::clear_atime() {
  atime_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddEmptyFileRequest::atime() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddEmptyFileRequest.atime)
  return atime_;
}
inline void AddEmptyFileRequest::set_atime(::google::protobuf::uint64 value) {
  
  atime_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.AddEmptyFileRequest.atime)
}

// fixed64 ctime = 4;
inline void AddEmptyFileRequest::clear_ctime() {
  ctime_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddEmptyFileRequest::ctime() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddEmptyFileRequest.ctime)
  return ctime_;
}
inline void AddEmptyFileRequest::set_ctime(::google::protobuf::uint64 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.AddEmptyFileRequest.ctime)
}

// -------------------------------------------------------------------

// AddNewFileRequest

// string name = 1;
inline void AddNewFileRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddNewFileRequest::name() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddNewFileRequest.name)
  return name_.GetNoArena();
}
inline void AddNewFileRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fsndnproto.AddNewFileRequest.name)
}
#if LANG_CXX11
inline void AddNewFileRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fsndnproto.AddNewFileRequest.name)
}
#endif
inline void AddNewFileRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fsndnproto.AddNewFileRequest.name)
}
inline void AddNewFileRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fsndnproto.AddNewFileRequest.name)
}
inline ::std::string* AddNewFileRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fsndnproto.AddNewFileRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddNewFileRequest::release_name() {
  // @@protoc_insertion_point(field_release:fsndnproto.AddNewFileRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddNewFileRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fsndnproto.AddNewFileRequest.name)
}

// bytes content = 2;
inline void AddNewFileRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddNewFileRequest::content() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddNewFileRequest.content)
  return content_.GetNoArena();
}
inline void AddNewFileRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fsndnproto.AddNewFileRequest.content)
}
#if LANG_CXX11
inline void AddNewFileRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fsndnproto.AddNewFileRequest.content)
}
#endif
inline void AddNewFileRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fsndnproto.AddNewFileRequest.content)
}
inline void AddNewFileRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fsndnproto.AddNewFileRequest.content)
}
inline ::std::string* AddNewFileRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:fsndnproto.AddNewFileRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddNewFileRequest::release_content() {
  // @@protoc_insertion_point(field_release:fsndnproto.AddNewFileRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddNewFileRequest::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:fsndnproto.AddNewFileRequest.content)
}

// int64 size = 3;
inline void AddNewFileRequest::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AddNewFileRequest::size() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddNewFileRequest.size)
  return size_;
}
inline void AddNewFileRequest::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.AddNewFileRequest.size)
}

// fixed64 mtime = 4;
inline void AddNewFileRequest::clear_mtime() {
  mtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddNewFileRequest::mtime() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddNewFileRequest.mtime)
  return mtime_;
}
inline void AddNewFileRequest::set_mtime(::google::protobuf::uint64 value) {
  
  mtime_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.AddNewFileRequest.mtime)
}

// fixed64 atime = 5;
inline void AddNewFileRequest::clear_atime() {
  atime_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddNewFileRequest::atime() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddNewFileRequest.atime)
  return atime_;
}
inline void AddNewFileRequest::set_atime(::google::protobuf::uint64 value) {
  
  atime_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.AddNewFileRequest.atime)
}

// fixed64 ctime = 6;
inline void AddNewFileRequest::clear_ctime() {
  ctime_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddNewFileRequest::ctime() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddNewFileRequest.ctime)
  return ctime_;
}
inline void AddNewFileRequest::set_ctime(::google::protobuf::uint64 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.AddNewFileRequest.ctime)
}

// -------------------------------------------------------------------

// FileNameRequest

// string name = 1;
inline void FileNameRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileNameRequest::name() const {
  // @@protoc_insertion_point(field_get:fsndnproto.FileNameRequest.name)
  return name_.GetNoArena();
}
inline void FileNameRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fsndnproto.FileNameRequest.name)
}
#if LANG_CXX11
inline void FileNameRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fsndnproto.FileNameRequest.name)
}
#endif
inline void FileNameRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fsndnproto.FileNameRequest.name)
}
inline void FileNameRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fsndnproto.FileNameRequest.name)
}
inline ::std::string* FileNameRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fsndnproto.FileNameRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileNameRequest::release_name() {
  // @@protoc_insertion_point(field_release:fsndnproto.FileNameRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileNameRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fsndnproto.FileNameRequest.name)
}

// -------------------------------------------------------------------

// PrefixRequest

// string prefix = 1;
inline void PrefixRequest::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrefixRequest::prefix() const {
  // @@protoc_insertion_point(field_get:fsndnproto.PrefixRequest.prefix)
  return prefix_.GetNoArena();
}
inline void PrefixRequest::set_prefix(const ::std::string& value) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fsndnproto.PrefixRequest.prefix)
}
#if LANG_CXX11
inline void PrefixRequest::set_prefix(::std::string&& value) {
  
  prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fsndnproto.PrefixRequest.prefix)
}
#endif
inline void PrefixRequest::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fsndnproto.PrefixRequest.prefix)
}
inline void PrefixRequest::set_prefix(const char* value, size_t size) {
  
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fsndnproto.PrefixRequest.prefix)
}
inline ::std::string* PrefixRequest::mutable_prefix() {
  
  // @@protoc_insertion_point(field_mutable:fsndnproto.PrefixRequest.prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrefixRequest::release_prefix() {
  // @@protoc_insertion_point(field_release:fsndnproto.PrefixRequest.prefix)
  
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrefixRequest::set_allocated_prefix(::std::string* prefix) {
  if (prefix != nullptr) {
    
  } else {
    
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:fsndnproto.PrefixRequest.prefix)
}

// -------------------------------------------------------------------

// ReadRequest

// string name = 1;
inline void ReadRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadRequest::name() const {
  // @@protoc_insertion_point(field_get:fsndnproto.ReadRequest.name)
  return name_.GetNoArena();
}
inline void ReadRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fsndnproto.ReadRequest.name)
}
#if LANG_CXX11
inline void ReadRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fsndnproto.ReadRequest.name)
}
#endif
inline void ReadRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fsndnproto.ReadRequest.name)
}
inline void ReadRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fsndnproto.ReadRequest.name)
}
inline ::std::string* ReadRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fsndnproto.ReadRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadRequest::release_name() {
  // @@protoc_insertion_point(field_release:fsndnproto.ReadRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fsndnproto.ReadRequest.name)
}

// int64 size = 2;
inline void ReadRequest::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ReadRequest::size() const {
  // @@protoc_insertion_point(field_get:fsndnproto.ReadRequest.size)
  return size_;
}
inline void ReadRequest::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.ReadRequest.size)
}

// -------------------------------------------------------------------

// WriteRequest

// string name = 1;
inline void WriteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteRequest::name() const {
  // @@protoc_insertion_point(field_get:fsndnproto.WriteRequest.name)
  return name_.GetNoArena();
}
inline void WriteRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fsndnproto.WriteRequest.name)
}
#if LANG_CXX11
inline void WriteRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fsndnproto.WriteRequest.name)
}
#endif
inline void WriteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fsndnproto.WriteRequest.name)
}
inline void WriteRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fsndnproto.WriteRequest.name)
}
inline ::std::string* WriteRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fsndnproto.WriteRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteRequest::release_name() {
  // @@protoc_insertion_point(field_release:fsndnproto.WriteRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fsndnproto.WriteRequest.name)
}

// bytes content = 2;
inline void WriteRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteRequest::content() const {
  // @@protoc_insertion_point(field_get:fsndnproto.WriteRequest.content)
  return content_.GetNoArena();
}
inline void WriteRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fsndnproto.WriteRequest.content)
}
#if LANG_CXX11
inline void WriteRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fsndnproto.WriteRequest.content)
}
#endif
inline void WriteRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fsndnproto.WriteRequest.content)
}
inline void WriteRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fsndnproto.WriteRequest.content)
}
inline ::std::string* WriteRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:fsndnproto.WriteRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteRequest::release_content() {
  // @@protoc_insertion_point(field_release:fsndnproto.WriteRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteRequest::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:fsndnproto.WriteRequest.content)
}

// int64 size = 3;
inline void WriteRequest::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 WriteRequest::size() const {
  // @@protoc_insertion_point(field_get:fsndnproto.WriteRequest.size)
  return size_;
}
inline void WriteRequest::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.WriteRequest.size)
}

// -------------------------------------------------------------------

// AddFileSegRequest

// string name = 1;
inline void AddFileSegRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFileSegRequest::name() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddFileSegRequest.name)
  return name_.GetNoArena();
}
inline void AddFileSegRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fsndnproto.AddFileSegRequest.name)
}
#if LANG_CXX11
inline void AddFileSegRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fsndnproto.AddFileSegRequest.name)
}
#endif
inline void AddFileSegRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fsndnproto.AddFileSegRequest.name)
}
inline void AddFileSegRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fsndnproto.AddFileSegRequest.name)
}
inline ::std::string* AddFileSegRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fsndnproto.AddFileSegRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFileSegRequest::release_name() {
  // @@protoc_insertion_point(field_release:fsndnproto.AddFileSegRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileSegRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fsndnproto.AddFileSegRequest.name)
}

// bytes content = 2;
inline void AddFileSegRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFileSegRequest::content() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddFileSegRequest.content)
  return content_.GetNoArena();
}
inline void AddFileSegRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fsndnproto.AddFileSegRequest.content)
}
#if LANG_CXX11
inline void AddFileSegRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fsndnproto.AddFileSegRequest.content)
}
#endif
inline void AddFileSegRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fsndnproto.AddFileSegRequest.content)
}
inline void AddFileSegRequest::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fsndnproto.AddFileSegRequest.content)
}
inline ::std::string* AddFileSegRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:fsndnproto.AddFileSegRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFileSegRequest::release_content() {
  // @@protoc_insertion_point(field_release:fsndnproto.AddFileSegRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFileSegRequest::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:fsndnproto.AddFileSegRequest.content)
}

// int32 size = 3;
inline void AddFileSegRequest::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 AddFileSegRequest::size() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddFileSegRequest.size)
  return size_;
}
inline void AddFileSegRequest::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.AddFileSegRequest.size)
}

// int32 seg = 4;
inline void AddFileSegRequest::clear_seg() {
  seg_ = 0;
}
inline ::google::protobuf::int32 AddFileSegRequest::seg() const {
  // @@protoc_insertion_point(field_get:fsndnproto.AddFileSegRequest.seg)
  return seg_;
}
inline void AddFileSegRequest::set_seg(::google::protobuf::int32 value) {
  
  seg_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.AddFileSegRequest.seg)
}

// -------------------------------------------------------------------

// GetFileSegRequest

// string name = 1;
inline void GetFileSegRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFileSegRequest::name() const {
  // @@protoc_insertion_point(field_get:fsndnproto.GetFileSegRequest.name)
  return name_.GetNoArena();
}
inline void GetFileSegRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fsndnproto.GetFileSegRequest.name)
}
#if LANG_CXX11
inline void GetFileSegRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fsndnproto.GetFileSegRequest.name)
}
#endif
inline void GetFileSegRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fsndnproto.GetFileSegRequest.name)
}
inline void GetFileSegRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fsndnproto.GetFileSegRequest.name)
}
inline ::std::string* GetFileSegRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fsndnproto.GetFileSegRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFileSegRequest::release_name() {
  // @@protoc_insertion_point(field_release:fsndnproto.GetFileSegRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFileSegRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fsndnproto.GetFileSegRequest.name)
}

// int32 size = 2;
inline void GetFileSegRequest::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 GetFileSegRequest::size() const {
  // @@protoc_insertion_point(field_get:fsndnproto.GetFileSegRequest.size)
  return size_;
}
inline void GetFileSegRequest::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.GetFileSegRequest.size)
}

// int32 seg = 3;
inline void GetFileSegRequest::clear_seg() {
  seg_ = 0;
}
inline ::google::protobuf::int32 GetFileSegRequest::seg() const {
  // @@protoc_insertion_point(field_get:fsndnproto.GetFileSegRequest.seg)
  return seg_;
}
inline void GetFileSegRequest::set_seg(::google::protobuf::int32 value) {
  
  seg_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.GetFileSegRequest.seg)
}

// -------------------------------------------------------------------

// EmptyRequest

// -------------------------------------------------------------------

// IntReply

// sint32 result = 1;
inline void IntReply::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 IntReply::result() const {
  // @@protoc_insertion_point(field_get:fsndnproto.IntReply.result)
  return result_;
}
inline void IntReply::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.IntReply.result)
}

// -------------------------------------------------------------------

// LongReply

// int64 result = 1;
inline void LongReply::clear_result() {
  result_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LongReply::result() const {
  // @@protoc_insertion_point(field_get:fsndnproto.LongReply.result)
  return result_;
}
inline void LongReply::set_result(::google::protobuf::int64 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:fsndnproto.LongReply.result)
}

// -------------------------------------------------------------------

// ReadReply

// bytes buffer = 1;
inline void ReadReply::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadReply::buffer() const {
  // @@protoc_insertion_point(field_get:fsndnproto.ReadReply.buffer)
  return buffer_.GetNoArena();
}
inline void ReadReply::set_buffer(const ::std::string& value) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fsndnproto.ReadReply.buffer)
}
#if LANG_CXX11
inline void ReadReply::set_buffer(::std::string&& value) {
  
  buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fsndnproto.ReadReply.buffer)
}
#endif
inline void ReadReply::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fsndnproto.ReadReply.buffer)
}
inline void ReadReply::set_buffer(const void* value, size_t size) {
  
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fsndnproto.ReadReply.buffer)
}
inline ::std::string* ReadReply::mutable_buffer() {
  
  // @@protoc_insertion_point(field_mutable:fsndnproto.ReadReply.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadReply::release_buffer() {
  // @@protoc_insertion_point(field_release:fsndnproto.ReadReply.buffer)
  
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadReply::set_allocated_buffer(::std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:fsndnproto.ReadReply.buffer)
}

// -------------------------------------------------------------------

// ChildrenReply

// repeated string children = 1;
inline int ChildrenReply::children_size() const {
  return children_.size();
}
inline void ChildrenReply::clear_children() {
  children_.Clear();
}
inline const ::std::string& ChildrenReply::children(int index) const {
  // @@protoc_insertion_point(field_get:fsndnproto.ChildrenReply.children)
  return children_.Get(index);
}
inline ::std::string* ChildrenReply::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:fsndnproto.ChildrenReply.children)
  return children_.Mutable(index);
}
inline void ChildrenReply::set_children(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fsndnproto.ChildrenReply.children)
  children_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChildrenReply::set_children(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fsndnproto.ChildrenReply.children)
  children_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChildrenReply::set_children(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  children_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fsndnproto.ChildrenReply.children)
}
inline void ChildrenReply::set_children(int index, const char* value, size_t size) {
  children_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fsndnproto.ChildrenReply.children)
}
inline ::std::string* ChildrenReply::add_children() {
  // @@protoc_insertion_point(field_add_mutable:fsndnproto.ChildrenReply.children)
  return children_.Add();
}
inline void ChildrenReply::add_children(const ::std::string& value) {
  children_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fsndnproto.ChildrenReply.children)
}
#if LANG_CXX11
inline void ChildrenReply::add_children(::std::string&& value) {
  children_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fsndnproto.ChildrenReply.children)
}
#endif
inline void ChildrenReply::add_children(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  children_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fsndnproto.ChildrenReply.children)
}
inline void ChildrenReply::add_children(const char* value, size_t size) {
  children_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fsndnproto.ChildrenReply.children)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ChildrenReply::children() const {
  // @@protoc_insertion_point(field_list:fsndnproto.ChildrenReply.children)
  return children_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ChildrenReply::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:fsndnproto.ChildrenReply.children)
  return &children_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fsndnproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_fsndn_2eproto
